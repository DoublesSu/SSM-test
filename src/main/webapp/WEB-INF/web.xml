<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--
    Web.xml配置文件
        Spring配置文件：contextConfigLocation
            开启Spring管理的组件扫描
            载入jdbc.properties配置文件
            配置数据库（DruidDataSource、c3p0DataSource）
                driverClassName、url、username、password
            整合MyBatis持久层相关
                configurationLocation：mybatis-config.xml的文件路径
                        plugins：PageHelper（分页插件）
                typeAliasPackage、dataSource、mapperLocations（接口与映射文件路径相同时不用配置）
        SpringMVC配置文件：DispatcherServlet(服务器启动时初始化)
            开启组件扫描
            配置视图解析器：InternalResouceViewResolver、ThymeleafViewResolver
            配置静态资源处理器：default-servlet-handler
            配置注解驱动
        字符编码过滤器：CharacterEncodingFilter
            encoding：UTF-8
            forceResponseEncoding:true
        HiddenHttpMethodFilter：请求方式：PUT、DELETE、GET、POST

    -->

    <!--    1、启动Spring的容器，加载spring的配置文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!--！！！！Spring的配置文件,不是mvc的文件路径-->
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--    2、配置springmvc的前端控制器-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:dispatcherServlet-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--    3、配置字符编码过滤器-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--    4、配置HiddenHttpMethodFilter,进行增删改查-->
    <filter>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

<!--    配置封装Ajax提交Put表单数据的过滤器-->
    <filter>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>